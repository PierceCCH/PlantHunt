{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { React, useState } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { firebaseConfig } from \"../firebase-config.js\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { NavigationContainer, useNavigation } from \"@react-navigation/native\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport { GoogleAuthProvider, getAuth, signInWithPopup } from 'firebase/auth';\nimport { orderBy, onSnapshot, limit, doc, collection, addDoc, getDocs, updateDoc, setDoc, query, where, getDoc } from \"firebase/firestore\";\nimport CustomButton from \"../src/components/CustomButton\";\nimport InputField from \"../src/components/InputField\";\nimport { Button } from \"react-native-paper\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar app = firebase.initializeApp(firebaseConfig);\nvar db = getFirestore(app);\nvar auth = getAuth(app);\nvar provider = new GoogleAuthProvider();\nfunction logPlant(_x, _x2) {\n  return _logPlant.apply(this, arguments);\n}\nfunction _logPlant() {\n  _logPlant = _asyncToGenerator(function* (userID, plantName) {\n    console.log(\"OG UID: \" + userID);\n    var currUser = db.collection('users');\n    currUser.where('uid', '==', userID).get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    }).catch(function (error) {\n      console.error(\"Error getting users: \", error);\n    });\n    userID = \"7FwPhxuKgSkJYQQBGxv9\";\n    var userRef = doc(db, \"users\", userID);\n    console.log(\"UserID: \" + userID + \"\\nPlant: \" + plantName);\n    try {\n      var _userDoc = yield getDoc(userRef);\n      if (_userDoc.exists()) {\n        var updatedPlants = [].concat(_toConsumableArray(_userDoc.data().plants), [plantName]);\n        yield updateDoc(userRef, {\n          plants: updatedPlants\n        });\n        console.log(\"Successfully added \" + plantName + \" to user \" + userID);\n      } else {\n        console.log(\"User with id \" + userID + \" does not exist.\");\n      }\n    } catch (error) {\n      console.error(\"Error adding plant to user \" + userID + \": \" + error);\n    }\n  });\n  return _logPlant.apply(this, arguments);\n}\nfunction getAdventure(_x3, _x4) {\n  return _getAdventure.apply(this, arguments);\n}\nfunction _getAdventure() {\n  _getAdventure = _asyncToGenerator(function* (userID, adventureID) {\n    var user = auth.currentUser;\n    var ref = collection(db, 'users').doc(userID);\n    ref.get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        var data = doc.data();\n      });\n    }).catch(function (error) {\n      console.error('Error updating user counts: ', error);\n    });\n    try {\n      console.log(auth.currentUser);\n      var docRef = yield addDoc(collection(db, \"users\"), {\n        uid: user ? user.uid : null\n      }).then(console.log(\"Plant Logged!\"));\n      console.log(\"Document written with ID: \" + docRef.id);\n      return docRef.id;\n    } catch (e) {\n      console.error(\"Error adding document: \", e);\n      return null;\n    }\n  });\n  return _getAdventure.apply(this, arguments);\n}\nfunction getPlants(_x5) {\n  return _getPlants.apply(this, arguments);\n}\nfunction _getPlants() {\n  _getPlants = _asyncToGenerator(function* (userId) {\n    try {\n      var userDocRef = doc(db, \"users\", userId);\n      var _userDoc2 = yield getDoc(userDocRef);\n      console.log(_userDoc2.data().plants);\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n    var userData = userDoc.data();\n    console.log(JSON.stringify(userData));\n    return userData.plants;\n  });\n  return _getPlants.apply(this, arguments);\n}\nfunction SignOut() {\n  var navigation = useNavigation();\n  return auth.currentUser && _jsx(\"div\", {\n    children: _jsx(\"button\", {\n      className: \"signOut\",\n      onPress: function onPress() {\n        navigation.navigate(\"Login\");\n        auth.signOut();\n      },\n      children: \"Sign Out\"\n    })\n  });\n}\nfunction SignIn() {\n  var navigation = useNavigation();\n  var handleSignIn = function handleSignIn() {\n    var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    if (isMobile) {\n      firebase.auth().signInWithRedirect(provider).then(function () {\n        firebase.auth().getRedirectResult().then(function (result) {\n          navigation.navigate(\"Home\");\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }).catch(function (error) {\n        console.error(error);\n      });\n    } else {\n      console.log(\"logged in???\");\n      navigation.navigate(\"Home\");\n    }\n  };\n  return _jsx(Text, {\n    children: _jsx(Button, {\n      className: \"signIn\",\n      onPress: function onPress() {\n        handleSignIn();\n      },\n      children: \"Sign in with Google\"\n    })\n  });\n}\nexport { logPlant, getAdventure, SignOut, SignIn, getPlants };","map":{"version":3,"names":["React","useState","Dimensions","Text","View","ScrollView","firebaseConfig","createMaterialTopTabNavigator","NavigationContainer","useNavigation","_Dimensions$get","get","width","height","firebase","GoogleAuthProvider","getAuth","signInWithPopup","orderBy","onSnapshot","limit","doc","collection","addDoc","getDocs","updateDoc","setDoc","query","where","getDoc","CustomButton","InputField","Button","initializeApp","getAnalytics","getFirestore","jsx","_jsx","app","db","auth","provider","logPlant","_x","_x2","_logPlant","apply","arguments","_asyncToGenerator","userID","plantName","console","log","currUser","then","querySnapshot","forEach","id","data","catch","error","userRef","userDoc","exists","updatedPlants","concat","_toConsumableArray","plants","getAdventure","_x3","_x4","_getAdventure","adventureID","user","currentUser","ref","docRef","uid","e","getPlants","_x5","_getPlants","userId","userDocRef","userData","JSON","stringify","SignOut","navigation","children","className","onPress","navigate","signOut","SignIn","handleSignIn","isMobile","test","navigator","userAgent","signInWithRedirect","getRedirectResult","result"],"sources":["/Users/aaron68lee/Documents/Coding-Projects/PlantHunt/src/backend.js"],"sourcesContent":["import { React, useState } from \"react\";\nimport { Dimensions, Text, View, ScrollView } from \"react-native\";\nimport { firebaseConfig} from '../firebase-config.js' // db, auth, provider, app, \nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { NavigationContainer, useNavigation} from \"@react-navigation/native\";\n\nconst { width, height } = Dimensions.get(\"window\");\n\n// import BACKEND packages\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport { GoogleAuthProvider, getAuth, signInWithPopup} from 'firebase/auth';\nimport {orderBy, onSnapshot, limit, doc, collection, addDoc, getDocs, updateDoc, setDoc, query, where, getDoc} from \"firebase/firestore\"; \n\n// import components\nimport CustomButton from \"../src/components/CustomButton\";\nimport InputField from \"../src/components/InputField\";\nimport { Button } from \"react-native-paper\";\n\n\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {getFirestore} from 'firebase/firestore'\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\n\n// Initialize Firebases\nconst app = firebase.initializeApp(firebaseConfig);\n\n const db = getFirestore(app)\n const auth = getAuth(app);\n const provider = new GoogleAuthProvider();\n\n\n// write data to the database\n// ========================== Write: User Found a Plant ===========================\nasync function logPlant(userID, plantName) \n{\n\n  //userID = \"aOvYVOE9XUSJcjCriC73dtVf4vn2\"\n  console.log(\"OG UID: \" + userID);\n\n  const currUser = db.collection('users')\n    \n  currUser.where('uid', '==', userID)\n    .get()\n    .then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    })\n    .catch((error) => {\n      console.error(\"Error getting users: \", error);\n  });\n\n  \n\n  /*\n  collectionRef.where('uid', '==', userID).get()\n    .then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(\"Doc: \" + JSON.stringify(doc));\n      });\n    })\n    .catch(err => {\n      console.error('Error finding user: ', err);\n    });\n  */\n\n  userID = \"7FwPhxuKgSkJYQQBGxv9\";\n  const userRef = doc(db, \"users\", userID);\n  console.log(\"UserID: \" + userID + \"\\nPlant: \" + plantName)\n\n  try {\n    // Get the user document from Firestore\n    const userDoc = await getDoc(userRef);\n\n    if (userDoc.exists()) {\n      // If the user document exists, update the plants array\n      const updatedPlants = [...userDoc.data().plants, plantName];\n      await updateDoc(userRef, { plants: updatedPlants });\n      console.log(`Successfully added ${plantName} to user ${userID}`);\n    } else {\n      console.log(`User with id ${userID} does not exist.`);\n    }\n  } catch (error) {\n    console.error(`Error adding plant to user ${userID}: ${error}`);\n  }\n  // old code \n  /*\n  try {\n    console.log(auth.currentUser);\n\n      \n      return userRef.update({\n        points: firebase.firestore.FieldValue.increment(10)\n      })\n      .then(() => {\n        console.log(\"User points updated successfully!\");\n      })\n      .catch((error) => {\n        console.error(\"Error updating user points: \", error);\n      });\n      \n      \n      const docRef = await addDoc(collection(db, \"users\"), {\n        uid: user ? user.uid : null,\n        \n      }).then(\n        console.log(\"Plant Logged!\"),\n      );\n\n      \n    \n      console.log(\"Document written with ID: \" + docRef.id);\n      return docRef.id;\n  } catch (e) {\n      console.error(\"Error adding document: \", e);\n      return null;\n  }\n  */\n\n  // new code \n\n}\n\n// ========================== Read: User Adventure ===========================\nasync function getAdventure(userID, adventureID) \n{\n \n  let user = auth.currentUser;\n  const ref = collection(db, 'users').doc(userID);\n\n  ref.get().then((querySnapshot) => {\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      //const newCount = (data.count || 0) + 1;\n      //doc.ref.update({ count: newCount });\n    });\n  }).catch((error) => {\n    console.error('Error updating user counts: ', error);\n  });\n  \n  // old code \n\n  try {\n    console.log(auth.currentUser);\n\n      const docRef = await addDoc(collection(db, \"users\"), {\n        uid: user ? user.uid : null,\n        \n      }).then(\n        console.log(\"Plant Logged!\"),\n      );\n    \n      console.log(\"Document written with ID: \" + docRef.id);\n      return docRef.id;\n  } catch (e) {\n      console.error(\"Error adding document: \", e);\n      return null;\n  }\n    \n}\n\n// ========================== Read: Get Plants ===========================\n\nasync function getPlants(userId) {\n  \n  try {\n    const userDocRef = doc(db, \"users\", userId);\n    const userDoc = await getDoc(userDocRef);\n    console.log(userDoc.data().plants);\n  } catch (error) {\n    console.log(\"Error: \", error);\n  }\n\n\n  const userData = userDoc.data();\n  console.log(JSON.stringify(userData));\n  return userData.plants;\n}\n\n\n// ========================== SignOut ===========================\n// component displayed when user IS signed in \nfunction SignOut()\n{\n  const navigation = useNavigation();\n  return auth.currentUser && (\n    <div>\n    <button className=\"signOut\" onPress={() => {\n      navigation.navigate(\"Login\");\n      auth.signOut();\n      }}>Sign Out\n    </button>\n    </div>\n  )\n}\n\nfunction SignIn()\n{\n\n\n  const navigation = useNavigation();\n\n  const handleSignIn = () => {\n\n    // Check if the user is on a mobile platform\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\n    // Use signInWithRedirect for mobile platforms and signInWithPopup for others\n    if (isMobile) {\n      firebase\n        .auth()\n        .signInWithRedirect(provider)\n        .then(() => {\n          firebase\n            .auth()\n            .getRedirectResult()\n            .then((result) => {\n              // Handle successful sign-in\n              navigation.navigate(\"Home\");\n            })\n            .catch((error) => {\n              // Handle errors\n              console.error(error);\n            });\n        })\n        .catch((error) => {\n          // Handle errors\n          console.error(error);\n        });\n    } else {\n        console.log(\"logged in???\")\n        navigation.navigate(\"Home\");\n          \n    }\n  };\n  \n  return (\n    <Text>\n      <Button className=\"signIn\" \n        onPress={() =>{\n          //useSignInWithGoogle();\n          handleSignIn();\n\n        }}>Sign in with Google</Button>\n      </Text>\n    );\n}\n\nexport \n{\n  logPlant,\n  getAdventure,\n  SignOut,\n  SignIn,\n  getPlants\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}